config {
  type: "table",
  schema: dataform.projectConfig.vars.schema,
  tags: ["ga4","intermediate","sessions"],
  bigquery: {
    partitionBy: "DATE(session_start_ts)",
    clusterBy: ["user_pseudo_id","ga_session_id"]
  }
}

/* Use ONLY columns present in raw_sessions_source */
WITH base AS (
  SELECT
    user_pseudo_id,
    ga_session_id,
    event_ts,                   -- TIMESTAMP in raw view
    event_date,                 -- DATE in raw view
    event_name,
    site_name,
    ts_source, ts_medium, ts_campaign,
    session_source, session_medium, session_campaign,
    geo_country, device_category, platform
  FROM ${ref("raw_sessions_source")}
),

/* Session start/end + earliest non-null session-level UTM and site_name */
sess_rollup AS (
  SELECT
    user_pseudo_id,
    ga_session_id,

    MIN(event_ts)  AS session_start_ts,
    MIN(event_date) AS date,

    /* earliest non-null */
    ARRAY_AGG(site_name       IGNORE NULLS ORDER BY event_ts ASC)[SAFE_OFFSET(0)] AS site_name,

    /* prefer explicit session_* params, else traffic_source first touch */
    COALESCE(
      ARRAY_AGG(session_source  IGNORE NULLS ORDER BY event_ts ASC)[SAFE_OFFSET(0)],
      ARRAY_AGG(ts_source       IGNORE NULLS ORDER BY event_ts ASC)[SAFE_OFFSET(0)]
    ) AS session_source,

    COALESCE(
      ARRAY_AGG(session_medium  IGNORE NULLS ORDER BY event_ts ASC)[SAFE_OFFSET(0)],
      ARRAY_AGG(ts_medium       IGNORE NULLS ORDER BY event_ts ASC)[SAFE_OFFSET(0)]
    ) AS session_medium,

    COALESCE(
      ARRAY_AGG(session_campaign IGNORE NULLS ORDER BY event_ts ASC)[SAFE_OFFSET(0)],
      ARRAY_AGG(ts_campaign      IGNORE NULLS ORDER BY event_ts ASC)[SAFE_OFFSET(0)]
    ) AS session_campaign

  FROM base
  GROUP BY user_pseudo_id, ga_session_id
),

/* last known geo/device/platform snapshot inside the session */
geo_device AS (
  SELECT
    user_pseudo_id,
    ga_session_id,
    ARRAY_AGG(geo_country     IGNORE NULLS ORDER BY event_ts DESC)[SAFE_OFFSET(0)] AS country,
    ARRAY_AGG(device_category IGNORE NULLS ORDER BY event_ts DESC)[SAFE_OFFSET(0)] AS device,
    ARRAY_AGG(platform        IGNORE NULLS ORDER BY event_ts DESC)[SAFE_OFFSET(0)] AS platform
  FROM base
  GROUP BY user_pseudo_id, ga_session_id
),

/* Pageview metrics per session from int_pageviews */
pv AS (
  SELECT
    user_pseudo_id,
    SPLIT(session_id, "-")[OFFSET(1)] AS ga_session_id_str,   -- string
    COUNT(*) AS page_views
  FROM ${ref("int_pageviews")}
  GROUP BY 1,2
),

/* Engagement and sign-ups per session (boolean -> int) */
flags AS (
  SELECT
    user_pseudo_id,
    ga_session_id,
    /* simple GA4 engaged_session proxy: presence of user_engagement */
    IF( COUNTIF(event_name = 'user_engagement') > 0, 1, 0 ) AS engaged_session,
    IF( COUNTIF(event_name IN ('sign_up','user_signup')) > 0, 1, 0 ) AS user_signup
  FROM base
  GROUP BY user_pseudo_id, ga_session_id
)

/* Final */
SELECT
  r.date,
  COALESCE(r.site_name, 'hotspawn')                    AS site_name,
  TIME(r.session_start_ts)                             AS session_time,
  r.user_pseudo_id                                     AS pseud_id,
  CONCAT(r.user_pseudo_id, "-", CAST(r.ga_session_id AS STRING)) AS session_id,

  gd.country,
  gd.device,
  gd.platform,

  u.user_type,

  /* very light channel grouping illustration */
  CASE
    WHEN LOWER(COALESCE(r.session_medium,'')) IN ('cpc','ppc','paidsearch','paid') THEN 'Paid Search'
    WHEN LOWER(COALESCE(r.session_medium,'')) IN ('email')                           THEN 'Email'
    WHEN LOWER(COALESCE(r.session_medium,'')) IN ('social','social-network','sm')    THEN 'Social'
    WHEN LOWER(COALESCE(r.session_source,'')) IN ('direct','(direct)') OR r.session_source IS NULL THEN 'Direct'
    ELSE 'Referral / Other'
  END AS channel_grouping,

  r.session_source,
  r.session_medium,
  r.session_campaign,

  /* bounce = single pageview session */
  IF(COALESCE(p.page_views,0) = 1, 1, 0)              AS bounces,
  COALESCE(p.page_views,0)                            AS page_view,

  COALESCE(f.user_signup,0)                           AS user_signup,
  COALESCE(f.engaged_session,0)                       AS engaged_session

FROM sess_rollup r
LEFT JOIN geo_device gd
  ON gd.user_pseudo_id = r.user_pseudo_id AND gd.ga_session_id = r.ga_session_id
LEFT JOIN pv p
  ON p.user_pseudo_id = r.user_pseudo_id AND CAST(p.ga_session_id_str AS INT64) = r.ga_session_id
LEFT JOIN flags f
  ON f.user_pseudo_id = r.user_pseudo_id AND f.ga_session_id = r.ga_session_id
LEFT JOIN ${ref("int_users")} u USING (user_pseudo_id)
