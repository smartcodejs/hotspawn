config {
  type: "incremental",
  schema: dataform.projectConfig.vars.schema,
  tags: ["ga4","intermediate","sessions"],
  bigquery: { partitionBy: "date", clusterBy: ["pseud_id","session_id"] },
  uniqueKey: ["session_id"]
}

WITH base AS (
  SELECT * FROM ${ref("raw_sessions_source")}
  WHERE 1=1
  ${when(incremental(), `
    AND event_date BETWEEN DATE_SUB(CURRENT_DATE('${dataform.projectConfig.vars.tz}'),
                                    INTERVAL ${dataform.projectConfig.vars.lookback_days}-1 DAY)
                       AND CURRENT_DATE('${dataform.projectConfig.vars.tz}')
  `)}
),

/* ------- pick earliest non-null UTM fields per session (no arrays, no postfix) ------- */
utm_source AS (
  SELECT user_pseudo_id, ga_session_id, session_source
  FROM (
    SELECT user_pseudo_id, ga_session_id, session_source,
           ROW_NUMBER() OVER (
             PARTITION BY user_pseudo_id, ga_session_id
             ORDER BY (session_source IS NULL), event_ts ASC
           ) AS rn
    FROM base
  ) WHERE rn = 1
),
utm_medium AS (
  SELECT user_pseudo_id, ga_session_id, session_medium
  FROM (
    SELECT user_pseudo_id, ga_session_id, session_medium,
           ROW_NUMBER() OVER (
             PARTITION BY user_pseudo_id, ga_session_id
             ORDER BY (session_medium IS NULL), event_ts ASC
           ) AS rn
    FROM base
  ) WHERE rn = 1
),
utm_campaign AS (
  SELECT user_pseudo_id, ga_session_id, session_campaign
  FROM (
    SELECT user_pseudo_id, ga_session_id, session_campaign,
           ROW_NUMBER() OVER (
             PARTITION BY user_pseudo_id, ga_session_id
             ORDER BY (session_campaign IS NULL), event_ts ASC
           ) AS rn
    FROM base
  ) WHERE rn = 1
),
utm_site AS (
  SELECT user_pseudo_id, ga_session_id, site_name
  FROM (
    SELECT user_pseudo_id, ga_session_id, site_name,
           ROW_NUMBER() OVER (
             PARTITION BY user_pseudo_id, ga_session_id
             ORDER BY (site_name IS NULL), event_ts ASC
           ) AS rn
    FROM base
  ) WHERE rn = 1
),
utm AS (
  SELECT
    s.user_pseudo_id, s.ga_session_id,
    s.session_source, m.session_medium, c.session_campaign, si.site_name
  FROM utm_source s
  LEFT JOIN utm_medium   m  USING (user_pseudo_id, ga_session_id)
  LEFT JOIN utm_campaign c  USING (user_pseudo_id, ga_session_id)
  LEFT JOIN utm_site     si USING (user_pseudo_id, ga_session_id)
),

/* ------- latest country/device/platform per session ------- */
geo_country_last AS (
  SELECT user_pseudo_id, ga_session_id, geo_country AS country
  FROM (
    SELECT user_pseudo_id, ga_session_id, geo_country,
           ROW_NUMBER() OVER (
             PARTITION BY user_pseudo_id, ga_session_id
             ORDER BY (geo_country IS NULL), event_ts DESC
           ) AS rn
    FROM base
  ) WHERE rn = 1
),
device_last AS (
  SELECT user_pseudo_id, ga_session_id, device_category AS device
  FROM (
    SELECT user_pseudo_id, ga_session_id, device_category,
           ROW_NUMBER() OVER (
             PARTITION BY user_pseudo_id, ga_session_id
             ORDER BY (device_category IS NULL), event_ts DESC
           ) AS rn
    FROM base
  ) WHERE rn = 1
),
platform_last AS (
  SELECT user_pseudo_id, ga_session_id, platform
  FROM (
    SELECT user_pseudo_id, ga_session_id, platform,
           ROW_NUMBER() OVER (
             PARTITION BY user_pseudo_id, ga_session_id
             ORDER BY (platform IS NULL), event_ts DESC
           ) AS rn
    FROM base
  ) WHERE rn = 1
),

session_bounds AS (
  SELECT
    user_pseudo_id,
    ga_session_id,
    MIN(event_ts)   AS session_start_ts,
    MIN(event_date) AS date
  FROM base
  GROUP BY 1,2
),

metrics AS (
  SELECT
    user_pseudo_id,
    ga_session_id,
    COUNTIF(event_name = 'page_view') AS page_view,
    IF(COUNTIF(event_name = 'page_view') = 1, 1, 0) AS bounces,
    IF(COUNTIF(event_name = 'user_engagement') > 0, 1, 0) AS engaged_session,
    COUNTIF(event_name IN ('sign_up','user_signup')) AS user_signup,
    IF(COUNTIF(event_name = 'first_visit') > 0, 'New User', 'Returning User') AS user_type
  FROM base
  GROUP BY user_pseudo_id, ga_session_id
)

SELECT
  sb.date,
  utm.site_name,
  TIME(sb.session_start_ts) AS session_time,
  sb.user_pseudo_id         AS pseud_id,
  CONCAT(sb.user_pseudo_id, '-', CAST(sb.ga_session_id AS STRING)) AS session_id,
  gc.country,
  dv.device,
  pf.platform,
  m.user_type,
  CASE
    WHEN (utm.session_source IS NULL OR utm.session_source = '')
     AND (utm.session_medium IS NULL OR utm.session_medium IN ('', '(not set)', '(none)')) THEN 'Direct'
    WHEN LOWER(utm.session_medium) IN ('cpc','ppc','paidsearch') THEN 'Paid Search'
    WHEN LOWER(utm.session_medium) = 'organic' THEN 'Organic Search'
    WHEN LOWER(utm.session_medium) IN ('social','paid_social') THEN 'Social'
    WHEN LOWER(utm.session_medium) = 'email' THEN 'Email'
    ELSE 'Other'
  END AS channel_grouping,
  utm.session_source,
  utm.session_medium,
  utm.session_campaign,
  m.engaged_session,
  m.bounces,
  m.page_view,
  m.user_signup
FROM session_bounds sb
LEFT JOIN utm            ON utm.user_pseudo_id = sb.user_pseudo_id AND utm.ga_session_id = sb.ga_session_id
LEFT JOIN geo_country_last gc ON gc.user_pseudo_id = sb.user_pseudo_id AND gc.ga_session_id = sb.ga_session_id
LEFT JOIN device_last      dv ON dv.user_pseudo_id = sb.user_pseudo_id AND dv.ga_session_id = sb.ga_session_id
LEFT JOIN platform_last    pf ON pf.user_pseudo_id = sb.user_pseudo_id AND pf.ga_session_id = sb.ga_session_id
LEFT JOIN metrics           m ON m.user_pseudo_id  = sb.user_pseudo_id AND m.ga_session_id  = sb.ga_session_id
