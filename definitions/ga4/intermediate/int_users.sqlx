config {
  type: "incremental",
  schema: dataform.projectConfig.vars.schema,
  tags: ["ga4","intermediate","users"],
  bigquery: { partitionBy: "first_seen", clusterBy: ["user_pseudo_id"] },
  uniqueKey: ["user_pseudo_id"]
}

WITH base AS (
  SELECT
    event_ts,
    event_date,
    user_pseudo_id,
    COALESCE(event_user_id, userprop_user_id) AS user_id_candidate,
    ga_session_id,
    event_name,
    geo_country,
    device_category,
    platform
  FROM ${ref("raw_users_source")}
  WHERE 1=1
  ${when(incremental(), `
    AND event_date BETWEEN DATE_SUB(CURRENT_DATE('${dataform.projectConfig.vars.tz}'),
                                    INTERVAL ${dataform.projectConfig.vars.lookback_days}-1 DAY)
                       AND CURRENT_DATE('${dataform.projectConfig.vars.tz}')
  `)}
),

agg_new AS (
  SELECT
    user_pseudo_id,
    MIN(event_date)               AS first_seen_new,
    MAX(event_date)               AS last_activity_date_new,
    COUNT(DISTINCT ga_session_id) AS sessions_new,
    IF(COUNTIF(event_name IN ('sign_up','user_signup')) > 0, 1, 0) AS signup_flag,
    IF(COUNTIF(event_name = 'first_visit') > 0, 1, 0)              AS has_first_visit
  FROM base
  GROUP BY user_pseudo_id
),

last_geo AS (
  SELECT user_pseudo_id, geo_country
  FROM (
    SELECT user_pseudo_id, geo_country,
           ROW_NUMBER() OVER (PARTITION BY user_pseudo_id ORDER BY (geo_country IS NULL), event_ts DESC) rn
    FROM base
  ) WHERE rn = 1
),
last_device AS (
  SELECT user_pseudo_id, device_category
  FROM (
    SELECT user_pseudo_id, device_category,
           ROW_NUMBER() OVER (PARTITION BY user_pseudo_id ORDER BY (device_category IS NULL), event_ts DESC) rn
    FROM base
  ) WHERE rn = 1
),
last_platform AS (
  SELECT user_pseudo_id, platform
  FROM (
    SELECT user_pseudo_id, platform,
           ROW_NUMBER() OVER (PARTITION BY user_pseudo_id ORDER BY (platform IS NULL), event_ts DESC) rn
    FROM base
  ) WHERE rn = 1
),
last_userid AS (
  SELECT user_pseudo_id, user_id_candidate AS user_id_new
  FROM (
    SELECT user_pseudo_id, user_id_candidate,
           ROW_NUMBER() OVER (PARTITION BY user_pseudo_id ORDER BY (user_id_candidate IS NULL), event_ts DESC) rn
    FROM base
  ) WHERE rn = 1
),

new_metrics AS (
  SELECT
    a.user_pseudo_id,
    a.first_seen_new,
    a.last_activity_date_new,
    a.sessions_new,
    a.signup_flag,
    a.has_first_visit,
    g.geo_country      AS last_geo_country_new,
    d.device_category  AS last_device_category_new,
    p.platform         AS last_platform_new,
    u.user_id_new
  FROM agg_new a
  LEFT JOIN last_geo      g USING (user_pseudo_id)
  LEFT JOIN last_device   d USING (user_pseudo_id)
  LEFT JOIN last_platform p USING (user_pseudo_id)
  LEFT JOIN last_userid   u USING (user_pseudo_id)
),

/* --------- previous snapshot (valid even on first run) --------- */
prev AS (
  ${when(incremental(), `
    SELECT
      user_pseudo_id, user_id, first_seen, total_sessions, signup_occurred, user_type,
      last_geo_country, last_device_category, last_platform, last_activity_date
    FROM ${self()}
  `, `
    SELECT *
    FROM UNNEST([STRUCT(
      CAST(NULL AS STRING) AS user_pseudo_id,
      CAST(NULL AS STRING) AS user_id,
      CAST(NULL AS DATE)   AS first_seen,
      CAST(NULL AS INT64)  AS total_sessions,
      CAST(NULL AS INT64)  AS signup_occurred,
      CAST(NULL AS STRING) AS user_type,
      CAST(NULL AS STRING) AS last_geo_country,
      CAST(NULL AS STRING) AS last_device_category,
      CAST(NULL AS STRING) AS last_platform,
      CAST(NULL AS DATE)   AS last_activity_date
    )]) WHERE 1 = 0
  `)}
),

keys AS (SELECT DISTINCT user_pseudo_id FROM new_metrics),

final_upserts AS (
  SELECT
    k.user_pseudo_id,
    COALESCE(n.user_id_new, p.user_id) AS user_id,
    LEAST(COALESCE(p.first_seen, DATE '9999-12-31'),
          COALESCE(n.first_seen_new, DATE '9999-12-31')) AS first_seen,
    COALESCE(p.total_sessions, 0) + COALESCE(n.sessions_new, 0) AS total_sessions,
    GREATEST(COALESCE(p.signup_occurred, 0), COALESCE(n.signup_flag, 0)) AS signup_occurred,
    CASE
      WHEN COALESCE(p.user_type, 'Returning User') = 'New User'
        OR COALESCE(n.has_first_visit, 0) = 1 THEN 'New User'
      ELSE 'Returning User'
    END AS user_type,
    COALESCE(n.last_geo_country_new,     p.last_geo_country)     AS last_geo_country,
    COALESCE(n.last_device_category_new, p.last_device_category) AS last_device_category,
    COALESCE(n.last_platform_new,        p.last_platform)        AS last_platform,
    GREATEST(COALESCE(p.last_activity_date, DATE '1970-01-01'),
             COALESCE(n.last_activity_date_new, DATE '1970-01-01')) AS last_activity_date
  FROM keys k
  LEFT JOIN new_metrics n USING (user_pseudo_id)
  LEFT JOIN prev        p USING (user_pseudo_id)
)

SELECT * FROM final_upserts
